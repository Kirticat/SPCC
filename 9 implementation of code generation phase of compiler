#include <stdio.h>
#include <string.h>

struct code {
    char nemo[4];
    char op1[3];
    char op2[3];
};

void main() {
    char stmt[4][6] = {{"T=A-B"},{"U=A-C"},{"V=T+U"},{"W=V+U"}};
    struct code c[7];
    char add_dis[2][3], op;
    int i, cp = 0, reg, j = 0, flag, fnd_add;
    
    for (i = 0; i <= 3; i++) {
        printf("\n%s", stmt[i]);
        op = stmt[i][3];
        flag = 0;
        
        switch (op) {
            case '-':
                reg = getreg();
                strcpy(c[cp].nemo, "MOV");
                c[cp].op1[0] = stmt[i][2];
                c[cp].op1[1] = '\0';
                c[cp].op2[0] = 'R';
                c[cp].op2[1] = reg;
                c[cp].op2[2] = '\0';
                printf("\n%s\t%s\t%s", c[cp].nemo, c[cp].op1, c[cp].op2);
                cp++;
                strcpy(c[cp].nemo, "SUB");
                c[cp].op1[0] = stmt[i][4];
                c[cp].op1[1] = '\0';
                c[cp].op2[0] = 'R';
                c[cp].op2[1] = reg;
                c[cp].op2[2] = '\0';
                printf("\n%s\t%s\t%s", c[cp].nemo, c[cp].op1, c[cp].op2);
 
                add_dis[j][0] = stmt[i][0];
                printf("\nAddress Descriptor of ");
                printf("%c is ", add_dis[j][0]);
                add_dis[j][1] = 'R';
                printf("%c", add_dis[j][1]);
                add_dis[j][2] = reg;
                printf("%c", add_dis[j][2]);
                add_dis[j][3] = '\0';
                j++;
                cp++;
                break;
                
            case '+':
                strcpy(c[cp].nemo, "ADD");
 
                for (j = 0; add_dis[j][0] != stmt[i][4]; j++);
                c[cp].op1[0] = 'R';
                c[cp].op1[1] = add_dis[j][2];
                c[cp].op1[2] = '\0';

                for (j = 0; add_dis[j][0] != stmt[i][2]; j++);
                c[cp].op2[0] = 'R';
                c[cp].op2[1] = add_dis[j][2];
                c[cp].op2[2] = '\0';
                printf("\n%s\t%s\t%s", c[cp].nemo, c[cp].op1, c[cp].op2);

                add_dis[j][0] = stmt[i][0];
                printf("\nAddress Descriptor of %c is %c%c",      add_dis[j][0], add_dis[j][1], add_dis[j][2]);
                cp++;
                if (i == 3) {
                    strcpy(c[cp].nemo, "MOV");
                    c[cp].op1[0] = 'R';
                    c[cp].op1[1] = add_dis[j][2];
                    c[cp].op1[2] = '\0';
                    c[cp].op2[0] = stmt[i][0];
                    c[cp].op2[1] = '\0';
                    printf("\n%s\t%s\t%s", c[cp].nemo, c[cp].op1, c[cp].op2);
                }
                break;
        }
    }
}
int getreg() {
    static int r = 48;
    return r++;
}
